<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2016-09-04T20:57:14+02:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.7 is released]]></title>
    <link href="http://balinterdi.com/2016/08/24/rock-and-roll-with-ember-dot-js-2-dot-7-is-released.html"/>
    <updated>2016-08-24T20:50:00+02:00</updated>
    <id>http://balinterdi.com/2016/08/24/rock-and-roll-with-ember-dot-js-2-dot-7-is-released</id>
    <content type="html"><![CDATA[<p>Today marks the release of the <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js book</a>,
version 2.7, which means the app built in the book now runs on Ember 2.7 (and uses Ember CLI 2.7).</p>

<p>There is a number of other small fixes, the full list of which you can see
<a href="https://github.com/balinterdi/rarwe-issues/milestone/15?closed=1">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dependency Injection to Write Better Tests]]></title>
    <link href="http://balinterdi.com/2016/08/11/using-dependency-injection-to-write-better-tests.html"/>
    <updated>2016-08-11T09:13:00+02:00</updated>
    <id>http://balinterdi.com/2016/08/11/using-dependency-injection-to-write-better-tests</id>
    <content type="html"><![CDATA[<p>Testing is given much emphasis in the Ember.js community, and testing tools have
showed steady progress to reduce the cost of writing tests of all types.</p>

<p>Lauren Tan wrote <a href="https://emberway.io/component-dependency-injection-in-ember-js-a46a39a5d30a#.45qfbv52x">a great post</a>
about how Dependency Injection (DI) can be used to decouple a parent component
from the internals of its child components. One of the gains of doing so is that
the parent component becomes more focused and thus easier to test.</p>

<p>In this post, I'm doing something similar, although much simpler. I want to show
you how to use DI in a simple helper function to make it easier to test.</p>

<h3>Just your ordinary, run-of-the-mill function</h3>

<p>Although the helper is an Ember (template) helper, the concepts could be very
easily transferred to other frameworks, libraries and even languages.</p>

<p>I recently had to modify a <code>normalizeText</code> helper function that looked
like this:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import Ember from 'ember';</p>

<p>export function normalizeText([text]) {
  let normalizedEOLs = text.trim().replace(/(?:\r\n|\r|\n)/g, '</p><p>');
  let noEmptyParagraphs = normalizedEOLs.replace(/(<p>&lt;\/p>)/g, '');
  return Ember.String.htmlSafe("<p>" + noEmptyParagraphs + "</p>");
}
```</p>

<p>(I realize the above code does not handle a text value of <code>undefined</code> or <code>null</code>.
The real code does but I want to keep the code examples to the minimum necessary
to get my point across.)</p>

<h3>Comparing objects to objects</h3>

<p>Its test was quite simple and straightforward:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import { normalizeText } from '../../../helpers/normalize-text';
import { module, test } from 'qunit';</p>

<p>module('Unit | Helper | normalize-text');</p>

<p>test('it works', function(assert) {
  let normalizedText = normalizeText(["The brown fox\r\njumped over the quick rabbit.\n"]);
  assert.equal(normalizedText, "<p>The brown fox</p><p>jumped over the quick rabbit.</p>");
});
```</p>

<p>The problem with that test is that we compare two <code>Handlebars.SafeString</code>
instances (returned by <code>Ember.String.htmlSafe</code>) which are different even if
the strings they wrap, their value, is the same:</p>

<p><code>
let s1 = Ember.String.htmlSafe("sid transit gloria mundi");
let s2 = Ember.String.htmlSafe("sid transit gloria mundi");
s1 === s2 // =&gt; false
</code></p>

<p>We're, however, interested in the equality of the strings. If only there was a
way to replace that pesky <code>Ember.String.htmlSafe</code> call from the call site...</p>

<h3>DI to the rescue</h3>

<p>This is exactly what Dependency Injection can help us do. Instead of hard-coding
that "sanitizer" function dependency, the function could take it as a parameter
so that callers could inject it. Usually DI examples use (and thus inject) class
names or object instances but it is important to realize that the injected param
could be very "primitive", like a simple function.</p>

<p>So here is how I rewrote the function:</p>

<p>```js
// app/helpers/normalize-text.js
import Ember from 'ember';</p>

<p>export function normalizeText([text], params={}) {
  let { sanitizer=Ember.String.htmlSafe } = params;
  let normalizedEOLs = text.trim().replace(/(?:\r\n|\r|\n)/g, '</p><p>');
  let noEmptyParagraphs = normalizedEOLs.replace(/(<p>&lt;\/p>)/g, '');
  return sanitizer("<p>" + noEmptyParagraphs + "</p>");
}</p>

<p>export default Ember.Helper.helper(normalizeText);
```</p>

<p>Notice how easy ES2015 destructuring makes the assignment of the sanitizer
function:</p>

<p><code>js
let { sanitizer=Ember.String.htmlSafe } = params;
</code></p>

<p>If no <code>sanitizer</code> key was present in <code>params</code>, then it will have a value of
<code>Ember.String.htmlSafe</code>, the default behavior.</p>

<p>The call from the test can now override the default behavior of sending the
normalized text through <code>Ember.String.htmlSafe</code> by passing in a "no-op"
sanitizer function:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import { normalizeText } from '../../../helpers/normalize-text';
import { module, test } from 'qunit';</p>

<p>function leaveAsIs(text) {
  return text;
}</p>

<p>module('Unit | Helper | normalize-text');</p>

<p>test('it works', function(assert) {
  let normalizedText = normalizeText(["The brown fox\r\njumped over the quick rabbit.\n"], { sanitizer: leaveAsIs });
  assert.equal(normalizedText, "<p>The brown fox</p><p>jumped over the quick rabbit.</p>");
});
```</p>

<p>We're now comparing simple strings which place nicely with <code>assert.equal</code> (with
<code>===</code>), and our test now passes.</p>

<h3>Non-testing benefits</h3>

<p>Code modifications introduced for the sake of testing usually also improve the
non-testing aspect. Here, we made it possible to pass any function before we
return the normalized text. We could, for example, use this to replace the <code>&lt;p&gt;</code>
tags with <code>&lt;span&gt;</code>s, if we so wish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.6 is released]]></title>
    <link href="http://balinterdi.com/2016/07/07/rock-and-roll-with-ember-dot-js-2-dot-6-is-released.html"/>
    <updated>2016-07-07T22:21:00+02:00</updated>
    <id>http://balinterdi.com/2016/07/07/rock-and-roll-with-ember-dot-js-2-dot-6-is-released</id>
    <content type="html"><![CDATA[<p>With some delay, but I just sent an update to all of the Rock and Roll with
Ember.js customers. The book brings the app in sync with Ember, Ember Data and
Ember CLI 2.6. Among a few other improvments it:</p>

<ul>
<li>Makes sure the new Ember welcome page is removed before generating the
application template: <a href="https://github.com/balinterdi/rarwe-issues/issues/196">#196</a></li>
<li>Adds a version string to the book's title and also in the Preface so that the
reader knows whether they are reading the latest version: <a href="https://github.com/balinterdi/rarwe-issues/issues/174">#174</a></li>
</ul>


<p>The list of all accomplished things can be seen <a href="https://github.com/balinterdi/rarwe-issues/milestone/14?closed=1">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Component Design in Ember - Part 4 - Use the hash helper]]></title>
    <link href="http://balinterdi.com/2016/05/26/complex-component-design-in-ember-part-4-use-the-hash-helper.html"/>
    <updated>2016-05-26T09:21:00+02:00</updated>
    <id>http://balinterdi.com/2016/05/26/complex-component-design-in-ember-part-4-use-the-hash-helper</id>
    <content type="html"><![CDATA[<p><em>This is the fourth and final part of my Complex Component Design series. Here are the preceding posts:</em></p>

<ul>
<li><a href="/2015/09/10/complex-component-design-in-ember-intro.html"><strong>Intro</strong></a></li>
<li><a href="/2015/12/18/complex-components-in-ember-dot-js-part-1-analyzing-user-flows.html"><strong>Part 1 - Analyzing User Flows</strong></a></li>
<li><a href="/2016/02/04/complex-components-in-ember-dot-js-part-2-towards-a-more-reactive-component.html"><strong>Part 2 - Towards a more reactive component</strong></a></li>
<li><a href="/2016/04/08/complex-component-design-in-ember-replace-the-observer.html"><strong>Part 3 - Remove the observer</strong></a></li>
<li><strong>Part 4 - Use the hash helper</strong></li>
</ul>


<p>You can find the code for this post <a href="https://github.com/balinterdi/ember-cli-autocomplete/releases/tag/ccd-part-four">on Github.</a></p>

<hr />

<p>After our last refactoring, the <code>ember-cli-autocomplete</code> component no longer
uses observers. However, the list of parameters the outermost, container
component, <code>auto-complete</code> returns is now unwieldily long:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;!-- tests/dummy/templates/index.hbs --&gt;


&lt;p&gt;{{#auto-complete&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      on-select=(action &quot;selectArtist&quot;)
      on-input=(action &quot;filterArtists&quot;)
      options=matchingArtists
      displayProperty=&quot;name&quot;
      class=&quot;autocomplete-container&quot; as |isDropdownOpen inputValue options
                                         focusedIndex selectedIndex
                                         toggleDropdown onSelect onInput|}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  (...)
{{/auto-complete}}</code></pre>
</div>
</p>

<p>Not only does that look clumsy, it also makes refactoring more difficult and one
always constantly have to flip between the component's template (where params
are yielded from) and the template where the component is used to see if the
position of values match. So how can improve this?</p>

<h2>Components as functions</h2>

<p>To understand several concepts about components, consider them functions.
Putting aside the fact that they can also emit DOM elements, you call them with
a list of arguments, usually, though not exclusively, a collection of key-value
pairs.  The component then does some internal stuff and returns a value from its
template via the <code>yield</code> keyword.</p>

<p>Our current case is another instance when treating them as functions can help us
find the solution. Ask yourself: what would you do if the return value of a
function you wrote grew to a long list of arguments? You would convert the
return value to a key-value collection, such as a hash, wouldn't you?</p>

<p>Well, in Ember's component land, we can do this by using the <code>hash</code> helper,
<a href="http://emberjs.com/blog/2016/01/15/ember-2-3-released.html">introduced in Ember 2.3</a>. It takes a list of key-value pairs at invocation
time and outputs an object (a hash) with them:</p>

<p><div>
  <pre><code class='html'>{{#with (hash firstName=&#39;Mike&#39; lastName=&#39;McCready&#39; instrument=&#39;guitar&#39;) as |musician|}}
  Hello, I&#39;m {{musician.firstName}} {{musician.lastName}} and I play the {{musician.instrument}}.
{{/with}}</code></pre>
</div>
</p>

<p>We can use the <code>hash</code> helper to bring some sanity to the return value of <code>auto-complete</code>
parameters. It currently looks like this:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;!-- addon/templates/components/auto-complete.hbs --&gt;


&lt;p&gt;{{yield isDropdownOpen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    inputValue
    options
    focusedIndex
    selectedIndex
    (action &quot;toggleDropdown&quot;)
    (action &quot;selectOption&quot;)
    (action &quot;inputDidChange&quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>So we introduce the <code>hash</code> helper to get the following:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;!-- addon/templates/components/auto-complete.hbs --&gt;


&lt;p&gt;{{yield (hash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isOpen=isDropdownOpen
inputValue=inputValue
options=options
focusedIndex=focusedIndex
selectedIndex=selectedIndex
toggleDropdown=(action &quot;toggleDropdown&quot;)
onSelect=(action &quot;selectItem&quot;)
onInput=(action &quot;inputDidChange&quot;))}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<h2>Modifying call sites</h2>

<p>Now that the component's return value has changed, we should not forget to
modify the callers, the downstream components that use that value:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;!-- tests/dummy/app/templates/index.hbs --&gt;


&lt;p&gt;{{#auto-complete&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  on-select=(action &quot;selectArtist&quot;)
  on-input=(action &quot;filterArtists&quot;)
  items=matchingArtists
  displayProperty=&quot;name&quot;
  class=&quot;autocomplete-container&quot; as |params|}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;div class=&quot;input-group&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{auto-complete-input
    value=params.inputValue
    on-change=params.onInput
    type=&quot;text&quot;
    class=&quot;combobox input-large form-control&quot;
    placeholder=&quot;Select an artist&quot;}}
{{#auto-complete-list
    isVisible=params.isOpen
    class=&quot;typeahead typeahead-long dropdown-menu&quot;}}
  {{#each params.options as |option|}}
    {{#auto-complete-option
        index=option.index
        on-click=params.onSelect
        isFocused=(eq params.focusedIndex option.index)
        isSelected=(eq params.selectedIndex option.index)}}
      &amp;lt;a href=&quot;#&quot;&amp;gt;{{option.value}}&amp;lt;/a&amp;gt;
    {{/auto-complete-option}}
  {{else}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;No results.&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{/each}}
{{/auto-complete-list}}
{{#auto-complete-dropdown-toggle on-click=params.toggleDropdown class=&quot;input-group-addon dropdown-toggle&quot;}}
  &amp;lt;span class=&quot;caret&quot;&amp;gt;&amp;lt;/span&amp;gt;
{{/auto-complete-dropdown-toggle}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;/div&gt;
{{/auto-complete}}</code></pre>
</div>
</p>

<p>Instead of the long list of parameters, <code>auto-complete</code> now yields a single hash
parameter (called <code>params</code> above), whose keys are used in the child components
(<code>params.isOpen</code>, <code>params.options</code>, etc.)</p>

<h2>Polyfill it</h2>

<p>Since we want our component to be usable not only in Ember >=2.3 applications,
where the <code>hash</code> helper is built in, we should add the
<code>ember-hash-helper-polyfill</code>, which makes the <code>hash</code> helper available in earlier
Ember versions, as a dependency of the addon:</p>

<p>```js
// package.json
{
  "name": "ember-cli-autocomplete",
  "version": "0.0.0",
  "dependencies": {</p>

<pre><code>(...)
"ember-hash-helper-polyfill": "0.1.0"
</code></pre>

<p>  },
}
```</p>

<h2>Wrapping up</h2>

<p>That wraps up my Complex Component Design in Ember.js series. Our component
improved by each post and I think we now have a pretty flexible and thus
reusable component. The main purpose of the series, however, is education, so I
hope that I was able to transfer some of the knowledge I've acquired by building
components.</p>

<p>If you would like to read the whole series as a pdf, just give my your email
address below and I'm sending it to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.5 is released]]></title>
    <link href="http://balinterdi.com/2016/05/03/rock-and-roll-with-ember-dot-js-2-dot-5-is-released.html"/>
    <updated>2016-05-03T10:22:00+02:00</updated>
    <id>http://balinterdi.com/2016/05/03/rock-and-roll-with-ember-dot-js-2-dot-5-is-released</id>
    <content type="html"><![CDATA[<p>I published a new version of <a href="http://rockandrollwithemberjs.com">the Rock and Roll Ember.js book</a>, and the
related application. It now runs on Ember, Ember Data and Ember CLI ~2.5.0.</p>

<p>More importantly, I made other improvements that serve to improve clarity and
reduce the number of new things the reader has to absorb at each step, which I
think is hugely important for an efficient, non-frustrating learning process.</p>

<ol>
<li><p>The biggest change (and simplification) is that I no longer sort the songs
from the get-go. To do so, I needed to use the <code>SortableMixin</code> and later, when
that was gone, an <code>ArrayProxy</code>. This resulted in other simplifications, like
not having to use (and maintain) a jsbin for that code snippet that used the
"global" Ember application building style and iterated on the magical
<code>sortedContent</code> property.</p></li>
<li><p>I also improved the flow of the Components chapter, rearranged some sections,
explained a few things that help comprehension and moved a few things that
only add to the learning burden.</p></li>
<li><p>I created an Appendix, called "Encore" to further the rock analogy. I felt
(and got matching feedback) that on some occasions there were too many
"sidebar" explanations (called "Backstage" sections in the book), that either
weren't important enough to warrant holding up the flow of explanation or
lacked context. I moved these sections into the Encore where interested
readers can learn about these topics when they see fit.</p></li>
<li><p>Last, but not least, I went through the book and built the application from
scratch to see that everything still works. I also applied git tags at the
end of each chapter so that readers of <a href="http://rockandrollwithemberjs.com/#light-my-fire">the middle-</a> and <a href="http://rockandrollwithemberjs.com/#stairway-to-heaven">high-tier packages</a>
can skip to each chapter in the code in a very simple way, using <code>git checkout</code>.</p></li>
</ol>


<p>(There were some other changes, the whole list of which you can see <a href="https://github.com/balinterdi/rarwe-issues/issues?q=is%3Aissue+milestone%3A2.5">here.</a>)</p>

<p>This is the most significant update since I published the Ember 2 version of the
book last October and I believe following the book (and the building of the app)
became even easier.</p>

<p>If this piqued your interest, you can download a sample chapter below.</p>
]]></content>
  </entry>
  
</feed>
